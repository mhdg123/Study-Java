 Method Overloading (메소드 중복 정의)
	 같은 이름으로 메소드를 매개변수 리스트를 달리하여 중복 정의,
	 즉, 이름이 같아도 메소드 signature 가 다르면 중복정의 가능.

  Method Signature 란
	   메소드 이름 + 매개변수 리스트 (parameter list)

	 1. 매개변수의 개수가 다르거나
	 2. 매개변수의 자료형이 다르거나
	 3. 매개변수의 순서가 다를 때
	 위 3개를 '매개변수 리스트' 라 한다

    메소드의 리턴 타입만 다른 경우는 중복 정의할 수 없다!!

     메소드 오버로딩의 장점:
	동일한 동작을 하는 메소드에 대해 매개변수만 달리하여 중복정의 하면
	이 메소드를 사용하는 입장에선 여러타입의 이름을 익힐 필요가 없다.

 시그니처가 다 다르므로 다른 메소드
 return은 시그니처에 포함되지 않음
 public static void sayHello() 와 public static int sayHello()->  같이사용하면 에러(return)


Call By Value : 값에 의한 호출
Call By Reference : 참조에 의한 호출

 	메소드 호출시 매개변수에 넘겨주는 값의 '복사' 가 발생.

 	자바에선
 	primitive type 이 매개변수 인 경우 Call By Value
 	 		: '값' 이 복사된다
 	 		: 메소드에서 매개변수 값을 변경해도 호출한 원본 쪽은 변화 없슴

 	reference type 이 매개변수 인 경우 Call By Reference 발생
 			: '주소' 가 복사된다.
 			: 메소드에서 매개변수 를 통해 변경하면 호출한 원본 쪽도 변화 발생


  Call By Value: 값에 의한 호출
  Call By Reference: 참조에 의한 호출

        int n=10;
        incNum(n);
        System.out.println("incNum(n) 호출 후n: "+n);//main의 n과 incNum의 n은 다름 그래서
        //incNum의 n의 값을 하나 증가해서 출력 후 끝나므로 incNum의 n의 값은 없어지고
        //main의 n값만 남으므로 10이 출력됨

        int[] arr={10};
        incNum(arr);
        System.out.println("incNum(arr[]) 호출 후arr: "+arr[0]);
        //incNum의 arr과 main의 arr은 다른것인데
        //주소값을 incNum에 복사하므로 주소값에 담긴값을 다시 출력하므로 값이 같음

    }
    public static void incNum(int n){
        n++;
        System.out.println("incNum(n): "+n);
    }
    public static void incNum(int[] arr){
        arr[0]++;
        System.out.println("incNum(arr[]): "+arr[0]);
    }


 재귀 호출 (recursive call)
  메소드(혹은 함수) 내부에서 메소드가 자기 자신을 또다시 호출하는 것.
 
  장점:
  	복잡한 문제를 간단하고 논리적으로 기술 가능.
 
  단점 & 주의 :
   메모리 부담 발생
  	무한히 재귀호출 할수 없다. --> Stack Overflow 발생
    따라서 재귀호출은 '종료조건'이 반드시 필요하다.
